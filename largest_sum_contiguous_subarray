# Function to find the maximum contiguous subarray
# Kadane's algorithm: max_so_far, max_ending_here
# def maxSubArraySum(a, size):
#     max_so_far = float('-inf')
#     max_ending_here = 0
#     for i in range(size):
#         max_ending_here = max_ending_here + a[i]
#         if max_so_far < max_ending_here:
#             max_so_far = max_ending_here
#         if max_ending_here < 0:
#             max_ending_here = 0
#     return max_so_far

# def maxSubArraySum(a, size):
#     max_so_far = float('-inf')
#     max_ending_here = 0
#     start = 0
#     end = 0
#     s = 0
#     for i in range(size):
#         max_ending_here += a[i]
#         if max_so_far < max_ending_here:
#             max_so_far = max_ending_here
#             start = s
#             end = i
#         if max_ending_here < 0:
#             max_ending_here = 0
#             s = i + 1
#     print("Maximum contiguous sum is %d" %(max_so_far))
#     print("Starting index %d" %(start))
#     print("Ending index %d" %(end))
# # Using Dynamic programming
# def maxSubArraySum(a, size):
#     # Create a list to store intermediate results
#     dp = [0] * size
#     dp[0] = a[0]
#     ans = dp[0]
#     for i in range(1, size):
#         dp[i] = max(a[i], a[i] + dp[i-1])
#         ans = max(ans, dp[i])
#     print(ans)


# Driver code
a = [-2, -3, 4, -1, -2, 1, 5, -3]
# print("Maximum contiguous sum is", maxSubArraySum(a, len(a)))
maxSubArraySum(a, len(a))